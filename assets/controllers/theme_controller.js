import { Controller } from '@hotwired/stimulus';

/*
* The following line makes this controller "lazy": it won't be downloaded until needed
* See https://symfony.com/bundles/StimulusBundle/current/index.html#lazy-stimulus-controllers
*/

/* stimulusFetch: 'lazy' */
export default class extends Controller {
    static targets = ['icon']


// M√©thode appel√©e quand le contr√¥leur est connect√© au DOM (au chargement de la page).
    connect() {
        // D√©tecte si l'utilisateur pr√©f√®re le th√®me sombre au niveau syst√®me.
        this.prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
        this.initTheme();
        // √âcoute les changements de pr√©f√©rence syst√®me (ex: passage en mode sombre dans les param√®tres OS).
        this.prefersDarkScheme.addEventListener('change', () => this.onSystemThemeChange());
    }

    // M√©thode appel√©e quand le contr√¥leur est d√©connect√© du DOM (rarement utilis√© ici).
    disconnect() {
        // Supprime l'√©couteur pour √©viter les fuites m√©moire.
        this.prefersDarkScheme.removeEventListener('change', () => this.onSystemThemeChange());
    }

    // Initialise le th√®me en fonction des pr√©f√©rences sauvegard√©es ou du syst√®me.
    initTheme() {
        const currentTheme = localStorage.getItem('theme'); // R√©cup√®re le th√®me sauvegard√© dans localStorage.
        // Si le th√®me sauvegard√© est "dark" OU si aucun th√®me n'est sauvegard√© mais que le syst√®me pr√©f√®re le sombre :
        if (currentTheme === 'dark' || (!currentTheme && this.prefersDarkScheme.matches)) {
            document.body.classList.add('dark-mode'); // Ajoute la classe CSS pour le th√®me sombre.
            if (this.hasIconTarget) { // V√©rifie si la cible "icon" existe dans le HTML.
                this.iconTarget.textContent = '‚òÄÔ∏è'; // Change l'ic√¥ne pour indiquer que le th√®me sombre est actif.
            }
        } else {
            document.body.classList.remove('dark-mode'); // Retire la classe CSS pour le th√®me sombre.
            if (this.hasIconTarget) { // V√©rifie si la cible "icon" existe dans le HTML.
                this.iconTarget.textContent = 'üåô'; // Change l'ic√¥ne pour indiquer que le th√®me clair est actif.
            }
        }
    }

    // M√©thode appel√©e quand on clique sur le bouton (via `data-action="click->theme#toggleTheme"`).
    toggleTheme() {

        // Si le th√®me sombre est d√©j√† actif :
        if (document.body.classList.contains('dark-mode')) {
            document.body.classList.remove('dark-mode'); // Passe en th√®me clair.
            if (this.hasIconTarget) {
                this.iconTarget.textContent = 'üåô'; // Met √† jour l'ic√¥ne.
            }
            localStorage.setItem('theme', 'light'); // Sauvegarde le choix dans localStorage.
        } else {
            document.body.classList.add('dark-mode'); // Passe en th√®me sombre.
            if (this.hasIconTarget) {
                this.iconTarget.textContent = '‚òÄÔ∏è'; // Met √† jour l'ic√¥ne.
            }
            localStorage.setItem('theme', 'dark'); // Sauvegarde le choix dans localStorage.
        }
    }

    // M√©thode appel√©e quand les pr√©f√©rences syst√®me changent (ex: passage en mode sombre dans les param√®tres OS).
    onSystemThemeChange() {
        // Si aucun th√®me n'est sauvegard√© dans localStorage, applique le th√®me en fonction des pr√©f√©rences syst√®me.
        if (!localStorage.getItem('theme')) {
            this.initTheme();
        }
    }
}
